lista di cose che nn mi interessano (tipicamente plugins)
slides
sessions (sarà che nn ho capito ma nn mi pare fondamentale…)
autolist (a meno che qlc1 nn me ne spieghi l'utilità)

cose a bassa priorità
which-key
yanky
toggleterm (nn che sia fondamentale ma magari finché nn metto 1 wm può aver senso)
surround
alpha

cose con discreta priorità
nvim tree (file explorer)
nvim web icons (sono i nerd fonts per nvim tree)
firenvim (per usare nvim ovnq)

cose che meritano 1 occhiata
nvim-orgmode (se nn ricordo male i file org sono qli di emacs che sono tipo jupiter notebook…)



keymaps
in keympas.lua e handlers.lua 
h come h nn stanno andando qli con il modifier A (che sarà ben la alt key no? sì è option)

*> offtopic
GIT BARE REPO
I have recently come accross with a new solution to one of my biggest headaches in any linux system and it is to manage the nightmareof the dot files. I have previously used **_stow_** in order to mantain the symbolic links, but there is a much better solution using git bare repositories.

# 1. Creating the repository
1. Create a git *bare* repository with the following line
```
    mkdir $HOME/.cfg
    git init --bare $HOME/.cfg
```
2. Create an alias for a better managing of the configuration
```
    alias config='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'
 ```
 It should be highlighted that you can put it in your .bashrc or the  file you use for your alias, in my case *$HOME/.config/aliasrc*
 
3. Disable the tacking of any single file
 ``` 
    config config --local status.showUntrackedFiles no
 ```
4. You can use it in a normal basis with config and keywords like "add, delete, status, checkout, ...". Remember to add a remote repositoryy with this lines
 ```
    config remote add origin <remote-url>
    config push -u origin master
 ```
 
 For example you can create a diferent configuration in different branches for each machine that you have.
 
 # 2. Restore a configuration
1. Prevent weird circular dependencies
  ``` 
      echo ".cfg" >> .gitignore 
  ```
2. Clone the remote repository
 ``` 
    git clone --bare <remote-git-repo-url> $HOME/.cfg 
 ```
3. Restore the alias and configuration of tracking
  ```
      alias config='/usr/bin/git --git-dir=$HOME/.cfg --work-tree=$HOME'
      config config --local status.showUntrackedFiles no
  ```
4. Proceed to checkout
  ```
  config checkout
  ```

